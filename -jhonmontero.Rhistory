#### 6 UI ######################################################################
fechas <- sort(unique(lubridate::dmy(prices_long$Fecha)))
runApp()
fechas[1]
runApp()
#### 6 UI ######################################################################
fechas <- as.character(sort(unique(as.Date(prices_long$Fecha))))
fechas
#### 6 UI ######################################################################
prices_long$Item
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
lubridate::dmy(dates_min)
as.Date(dates_min)
lubridate::as_date(dates_min)
runApp()
dates <- sort(unique(prices_long$Fecha))                                          # define list with date range in data
prices_long$Fecha
dates <- sort(unique(lubridate::dmy(prices_long$Fecha)))                                          # define list with date range in data
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#### 6 UI ######################################################################
ui <- bootstrapPage(
navbarPage("JMMI COLOMBIA",                                                                                     # Nombre del DASHBOARD o del panel navegador
theme = shinytheme("simplex"),                                                                       # Tema del navbarpage
#### * 2da ventana ################################################
tabPanel("Grafica de Precios",
icon = icon("chart-line"),                                                                  # Nombre del primer panel
chooseSliderSkin(skin = "ice", color = NULL),
sidebarLayout(
sidebarPanel(
tags$i(h6("Nota: Los precios reportados solamente son indicativos.", style="color:#045a8d")),        # Texto y color del texto
pickerInput("grafico_linea",                                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
multiple = FALSE,
),
hr(),                                                                                                # Linea separadora
conditionalPanel(condition = "input.grafico_linea == 'Departamento' | input.grafico_linea == 'Municipio'",
pickerInput("select_item",                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Grupo de productos: ",
choices = item <- sort(unique(prices_long$Item)),
selected = item[1],
multiple = FALSE,
)
),
hr(),
conditionalPanel(condition = "input.grafico_linea == 'Departamento' | input.grafico_linea == 'Municipio'",
sliderTextInput("select_date",                                                # set date slider
"Months:",
force_edges = TRUE,
choices = dates,
selected = c(dates_min, dates_max)
)
),
hr(),
h6("Algo de carreta si se quiere o se puede eliminar esto"),
absolutePanel(id = "dropdown", bottom = 20, left = 20, width = 200,                            # define blue info button
fixed=TRUE, draggable = FALSE, height = "auto",
dropdown(
h4("Se requiere boton informativo"),
column(
HTML("Una tabla puede ir aqui???"),
width = 6),
column(p(h6("textooooooo")),
p(h6("más texto")),
p(h6("super textoooooo")),
p(h6("More details on the SMEB can be found here:",
tags$a(href="https://www.impact-repository.org/toolkit/file-storage-and-management/",
"Prueba de link"), ".")),
width = 5),
width = "650px",
tooltip = tooltipOptions(title = "Queremos utilizar un boton informativo?"),
size = "xs",
up = TRUE,
style = "jelly", icon = icon("info"),
animate = animateOptions(
enter = "fadeInLeftBig",
exit  = "fadeOutLeft",
duration = 0.5)
)
),
width = 3,                                                                    # Cambiar el ancho del recuadro
),
mainPanel(                                                                      # Cuando va sidebarLayout debe ir mainPanel
br(),
tags$i(textOutput("plot_text"), style = "color: red"),                        # display error message displayed if there is no data available
highchartOutput("graph", width = "100%", height = "600px"),                   # display large chart
width = 8                                                                     # set width of main panel (out of 12, as per bootstrap logic)
)
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(data)
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding = "UTF-8")       # load JPMI dataset
View(data)
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding = "WINDOWS-1252")       # load JPMI dataset
View(data)
View(data)
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), sep=";", encoding = "UTF-8")       # load JPMI dataset
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), sep=",", encoding = "UTF-8")       # load JPMI dataset
View(data)
data        <- read.csv("data/longterm_data.csv",  sep=",", encoding = "UTF-8")       # load JPMI dataset
View(data)
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), fileEncoding = "UTF-8")       # load JPMI dataset
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""))       # load JPMI dataset
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), fileEncoding = "UTF-8")       # load JPMI dataset
View(data)
data        <- read_csv("data/longterm_data.csv", na.strings = c("NA", ""))       # load JPMI dataset
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding='utf-8')       # load JPMI dataset
View(data)
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding ='windown-1252')       # load JPMI dataset
View(data)
data        <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="UTF-8", stringsAsFactors=FALSE)       # load JPMI dataset
View(data)
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="iso-8859-1")       # load JPMI dataset
View(data)
data <- readr::read_csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="iso-8859-1")       # load JPMI dataset
data <- readr::read_csv("data/longterm_data.csv", na = c("NA", ""), encoding="iso-8859-1")       # load JPMI dataset
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="Latin-1")
View(data)
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="windows-1252")
View(data)
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="latin1")
View(data)
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="latin1")       # load JPMI dataset
item_list   <- read.csv("data/item_list.csv", encoding="latin1")                                     # load item list
View(item_list)
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="latin1")
data <- read.csv("data/longterm_data.csv", na.strings = c("NA", ""), encoding="latin1")       # load JPMI dataset
item_list   <- read.csv("data/item_list.csv", encoding="latin1")                                     # load item list
if (grepl("[0-9]{4}-[0-9]{2}-[0-9]{2}", data$mes[1])) {                           # format date column in JPMI dataset as date
data$mes <- as.Date(data$mes, format = "%Y-%m-%d")
} else if (grepl("[0-9]{2}/[0-9]{2}/[0-9]{4}", data$mes[1])) {
data$mes <- as.Date(data$mes, format = "%d/%m/%Y")
}
numerico <- c("precio_aceite", "precio_arroz", "precio_atun", "precio_cloro",
"precio_crema_dental", "precio_frijoles", "precio_harina",
"precio_huevos", "precio_jabon_personal", "precio_jabon_ropa",
"precio_leche", "precio_lentejas", "precio_panales", "precio_papa",
"precio_papel_higienico", "precio_pasta", "precio_platano",
"precio_pollo", "precio_tabapocas", "precio_toallas_higienicas",
"precio_tomate", "precio_yuca", "dias_exisnc_aceite", "dias_exisnc_arroz",
"dias_exisnc_atun", "dias_exisnc_cloro", "dias_exisnc_crema_dental",
"dias_exisnc_frijoles", "dias_exisnc_harina", "dias_exisnc_huevos",
"dias_exisnc_jabon_personal", "dias_exisnc_jabon_ropa", "dias_exisnc_leche",
"dias_exisnc_lentejas", "dias_exisnc_panales", "dias_exisnc_papa",
"dias_exisnc_pasta", "dias_exisnc_platano", "dias_exisnc_pollo",
"dias_exisnc_tabapocas", "dias_exisnc_toallas_higienicas",
"dias_exisnc_tomate", "dias_exisnc_yuca")
for (i in numerico) {
data[i] <- as.numeric(data[[i]])
}
prices <- data %>%
select(mes, departamento, municipio, starts_with("precio_")) %>%   # calculate site medians
group_by(mes, departamento, municipio) %>%
summarise_all(median, na.rm = TRUE) %>%
select(mes, departamento, municipio, starts_with("precio_")) %>%         # calculate departamento medians
group_by(mes, departamento, municipio) %>%
summarise_all(median, na.rm = TRUE) %>%
setNames(gsub("precio_","",names(.))) %>%                                            # rename columns names
ungroup() %>%
group_by(mes) %>%
mutate(Lista_alimentos      = arroz + lentejas + huevos + pollo + frijoles +         # calculate  values
pasta + harina + platano + papa + yuca + aceite + tomate + leche + atun ,
Lista_noalimentarios = papel_higienico + toallas_higienicas + jabon_ropa + crema_dental +
jabon_personal + panales + cloro + tabapocas,
Lista_total          = Lista_alimentos + Lista_noalimentarios
) %>%
mutate_if(is.numeric, round, 0) %>%                                                  # round values
rename(Fecha = mes, Departamento = departamento, Municipio = municipio,              # rename column names
"Lista de productos alimentarios"    = Lista_alimentos,
"Lista de productos no alimentarios" = Lista_noalimentarios,
"Lista de productos compilados"      = Lista_total,
"Arroz (1 kg)"       = arroz,
"Lentejas (1 libra)" = lentejas,
"Huevos rojos tipo AA (1 unidad)"         = huevos,
"Pechuga de pollo (1 libra)"              = pollo,
"Fríjoles bola roja (1 libra)"            = frijoles,
"Pastas tipo espagueti (1 libra)"         = pasta,
"Harina de maíz (1 kg)"                   = harina,
"Plátano (1 kg)"     = platano,
"Papa pastusa (1 libra)"  = papa,
"Yuca (1 libra)"     = yuca,
"Aceite (1 Lt)"      = aceite,
"Tomate chonto (1 libra)"     = tomate,
"Leche (1 Lt)"       = leche,
"Lomitos de atún en lata en aceite (170 gr)"   = atun,
"Papel higiénico doble hoja (1 unidad )"       = papel_higienico,
"Toallas higiénicas (1 paquete)"               = toallas_higienicas,
"Jabón de ropa en barra (1 barra de 300gr)"    = jabon_ropa,
"Crema de dientes (1 tubo de 100gr)"      = crema_dental,
"Jabón personal en barra (1 barra de 75gr)"    = jabon_personal,
"Pañales (1 paquete de 30 unidades)"      = panales,
"Cloro (1 Lt)"          = cloro,
"Tapabocas quirúrgico (1 unidad )"        = tabapocas
)
prices_long <- gather(prices, Item, Price, 4:ncol(prices))                        # change dataframe to long format
indicators <- data %>%
select(mes, departamento, municipio, starts_with("desafios_"),
-ends_with("_arroz"), -ends_with("_lentejas"), -ends_with("_huevos"), -ends_with("_pollo"),
-ends_with("_frijoles"), -ends_with("_pasta"), -ends_with("_harina"), -ends_with("_platano"),
-ends_with("_papa"), -ends_with("_yuca"), -ends_with("_aceite"), -ends_with("_tomate"),
-ends_with("_leche"), -ends_with("_atun"))
indicators2 <- indicators %>%
gather(Indicator, Value, 4:(ncol(indicators))) %>%
group_by(mes, departamento, municipio, Indicator) %>%
summarise(freq = sum(Value == 1 | Value == "Si", na.rm = TRUE) / sum(!is.na(Value)) * 100) %>%
mutate_if(is.numeric, round, 0) %>%
spread(Indicator, freq) %>%
rename(Fecha = mes,
Departamento = departamento,
Municipio = municipio,
'% de comerciantes que reportaron enfrentar desafíos en los últimos 30 días' = desafios_30ds,
'% de comerciantes que reportaron desafíos por: Ninguna vía de acceso' = desafios_1,
'% de comerciantes que reportaron desafíos por: Bloqueos en las vías' = desafios_2,
'% de comerciantes que reportaron desafíos por: Restricciones en las fronteras' = desafios_3,
'% de comerciantes que reportaron desafíos por: Inseguridad en la ruta de abastecimiento' =  desafios_4,
'% de comerciantes que reportaron desafíos por: Malas condiciones físicas de las carreteras' = desafios_5,
'% de comerciantes que reportaron desafíos por: Los proveedores detuvieron sus produccioness' = desafios_6,
'% de comerciantes que reportaron desafíos por: Los proveedores no tienen esos productos' = desafios_7,
'% de comerciantes que reportaron desafíos por: El tiempo entre el pedido y la entrega es más largo' = desafios_8,
'% de comerciantes que reportaron desafíos por: Los proveedores no están produciendo estos productos' = desafios_9,
'% de comerciantes que reportaron desafíos por: Hay escasez de transportistas' = desafios_10,
'% de comerciantes que reportaron desafíos por: El precio de la gasolina es muy alto' = desafios_11,
'% de comerciantes que reportaron desafíos por: El precio del transporte es muy alto' = desafios_12,
'% de comerciantes que reportaron desafíos por: El principal proveedor ya no da acceso a crédito' = desafios_13,
'% de comerciantes que reportaron desafíos por: El negocio no tiene suficiente liquidez para reabastecerse' = desafios_14,
'% de comerciantes que reportaron desafíos por: No hay suficiente capacidad de almacenamiento' = desafios_15,
'% de comerciantes que reportaron desafíos por: Los agentes comerciales ya no visitan los comercios de la zona' = desafios_16,
'% de comerciantes que reportaron desafíos por: Mala relación con el proveedor' = desafios_17
)
full <- left_join(prices, indicators2, by = c("Fecha", "Departamento", "Municipio"))
#### * 3.3 Stock ###############################################################
stock <- data %>%
select(mes, departamento, municipio, starts_with("dias_exisnc"))
stock <- stock %>%
group_by(mes, departamento, municipio) %>%
summarise_all(median, na.rm = TRUE) %>%
select(mes, departamento, municipio, starts_with("dias_exisnc")) %>%          # calculate departamento medians
group_by(mes, departamento, municipio) %>%
summarise_all(median, na.rm = TRUE) %>%
setNames(gsub("dias_exisnc_","",names(.))) %>%                                 # rename columns names
ungroup() %>%
group_by(mes) %>%
rename(Fecha = mes, Departamento = departamento, Municipio = municipio,       # rename column names
"Días de existencia: Arroz"      = arroz,
"Días de existencia: Lentejas"   = lentejas,
"Días de existencia: Huevos rojos tipo AA"         = huevos,
"Días de existencia: Pechuga de pollo"             = pollo,
"Días de existencia: Fríjoles bola roja"           = frijoles,
"Días de existencia: Pastas tipo espagueti"        = pasta,
"Días de existencia: Harina de maíz"               = harina,
"Días de existencia: Plátano"       = platano,
"Días de existencia: Papa pastusa"  = papa,
"Días de existencia: Yuca"          = yuca,
"Días de existencia: Aceite"        = aceite,
"Días de existencia: Tomate chonto"     = tomate,
"Días de existencia: Leche"             = leche,
"Días de existencia: Lomitos de atún en lata en aceite"   = atun)
max(unique(lubridate::dmy(prices_long$Fecha)))
dates <- sort(unique(lubridate::dmy(prices_long$Fecha)))                                          # define list with date range in data
dates_min  <- min(lubridate::dmy(prices_long$Fecha))                              # set minimum date to be displayed
dates_max  <- max(lubridate::dmy(prices_long$Fecha))                              # maximum date in data
dates_max2 <- sort(unique(lubridate::dmy(prices_long$Fecha)), decreasing=T)[2]    # second-latest date
dates_max_1y <- as.POSIXlt(dates_max)                                             # most recent month minus 1 year
dates_max_1y$year <- dates_max_1y$year-1
dates_max_1y <- as.Date(format(dates_max_1y, "%Y-%m-01"), format = "%Y-%m-%d")
plot_location_list <- prices_long %>%                                           # define location list (which is later used as choice filter options)
ungroup() %>%
select(Departamento, Municipio) %>%                                             # extract governorate and district columns
arrange(Departamento, Municipio) %>%                                            # list alphabetically
filter(!duplicated(Departamento))                                               # remove duplicates
indicator_list <- names(indicators) %>%
str_subset(c("Fecha", "Departamento", "Municipio"), negate = TRUE)              # extract additional indicator list
cols      <- c("rgb(238,88,89)",   "rgb(88,88,90)",    "rgb(165,201,161)",        # define color palette for plot lines
"rgb(86,179,205)",  "rgb(246,158,97)",  "rgb(255,246,122)",        # están los colores reach + una paleta de amarillos y naranjas
"rgb(210,203,184)", "rgb(247,172,172)", "rgb(172,172,173)",        # azul claro y distintos tonos de beige
"rgb(210,228,208)", "rgb(171,217,230)", "rgb(251,207,176)",
"rgb(255,251,189)", "rgb(233,229,220)")
full_list <- data.frame(Item = indicator_list,                                    # create full indicator list
Group = "Indicadores") %>% arrange(Item)
full_list <- rbind(item_list, full_list)                                          # combine prices and additional indicators
prices_country <- prices %>%                                                      # aggregate price data at country level
select(-Departamento, -Municipio) %>%
group_by(Fecha) %>%
summarise_all(median, na.rm = TRUE)
prices_country_long <- gather(prices_country, Item, Price, 2:ncol(prices_country))# transform country-level price data to long format
prices_country_home <- prices_country %>%                                         # filter out SMEB data from country level price data
filter(lubridate::dmy(Fecha) >= dates_min) %>%
select(Fecha, `Lista de productos alimentarios`, `Lista de productos no alimentarios`,
`Lista de productos compilados`) %>%
gather(Item, Price, 'Lista de productos alimentarios':'Lista de productos compilados')                                    # transform SMEB data to long format so highcharter can read dataframe
one_year_from_current_date <- lubridate::dmy(prices_country_home$Fecha) %>% max() - 366
prices_country_home <- prices_country_home %>% filter(Fecha > one_year_from_current_date)
runApp()
runApp()
runApp()
plot_item_select <- reactive({
if (input$plot_aggregation == 'Departamento' | (input$plot_aggregation == 'Municipio')) {input$select_item}
})
plot_datasetInput <- reactive({prices_long %>%
filter(
is.null(plot_item_select()) | Item %in% plot_item_select()
) %>%
execute_if(input$plot_aggregation == 'Departamento' | input$plot_aggregation == 'Municipio',
filter(
Fecha >= input$select_date[1] & Fecha <= input$select_date[2]
)
) %>%
execute_if(input$plot_aggregation == 'District',    filter(is.null(plot_district_select()) | District %in% plot_district_select())) %>%
execute_if(input$plot_aggregation == 'Governorate', select(-District)) %>%
execute_if(input$plot_aggregation == 'Governorate', group_by(Date, Governorate, Item)) %>%
execute_if(input$plot_aggregation == 'Governorate', summarise_all(median, na.rm = TRUE)) %>%
execute_if(input$plot_aggregation == 'Governorate', filter(is.null(plot_governorate_select()) | Governorate %in% plot_governorate_select())) %>%
execute_if(input$plot_aggregation == 'Country'      & input$plot_type == 'Line Graph', select(-Governorate, -District)) %>%
execute_if(input$plot_aggregation == 'Country'      & input$plot_type == 'Line Graph', group_by(Date, Item)) %>%
execute_if(input$plot_aggregation == 'Country'      & input$plot_type == 'Line Graph', summarise_all(median, na.rm = TRUE)) %>%
execute_if(input$plot_aggregation == 'District'     & input$select_index == 'TRUE', group_by(Governorate, District, Item)) %>%
execute_if(input$plot_aggregation == 'Governorate'  & input$select_index == 'TRUE', group_by(Governorate, Item)) %>%
execute_if(input$plot_aggregation == 'Country'      & input$plot_type == 'Line Graph' & input$select_index == 'TRUE', group_by(Item)) %>%
execute_if((input$plot_aggregation == 'Country' & input$plot_type == 'Line Graph' | input$plot_aggregation != 'Country') & input$select_index == 'TRUE',
mutate(Price = round(((Price / c(Price[Date == input$select_date_index], NA)[1])-1)*100, digits = 1))) %>%
filter(!is.na(Price))
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
#### 6 UI ######################################################################
ui <- bootstrapPage(
navbarPage("JMMI COLOMBIA",                                                                                     # Nombre del DASHBOARD o del panel navegador
theme = shinytheme("simplex"),                                                                       # Tema del navbarpage
#### * 2da ventana ################################################
tabPanel("Grafica de Precios",
icon = icon("chart-line"),                                                                  # Nombre del primer panel
chooseSliderSkin(skin = "Flat", color = NULL),
sidebarLayout(
sidebarPanel(
tags$i(h6("Nota: Los precios reportados solamente son indicativos.", style="color:#045a8d")),        # Texto y color del texto
pickerInput("plot_aggregation",                                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
multiple = FALSE,
),
hr(),                                                                                                # Linea separadora
# Cuando se selecciona Departamento
conditionalPanel(condition = "input.plot_aggregation == 'Departamento'",
radioGroupButtons("plot_by_departamento_item",
label = "Group by:",
choices = c("Item", "Departamento"),
selected = "Item",
justified = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' & input.plot_by_departamento_item == 'Departamento'",
pickerInput("select_bydepartamento_departamento",
label = "Departamento(s):",
choices = unique(plot_location_list$Departamento),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = sort(plot_location_list$Departamento)[1],
multiple = TRUE
)
),
# Cuando se selecciona Municipio
conditionalPanel(condition = "input.plot_aggregation == 'Municipio'",
radioGroupButtons("plot_by_municipio_item",
label = "Group by:",
choices = c("Item", "Municipio"),
selected = "Item",
justified = TRUE
)
),
prices_long$Departamento
conditionalPanel(condition = "input.plot_aggregation == 'Municipio' & input.plot_by_municipio_item == 'Municipio'",
prices_long$Departamento
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot_departamento_select <- reactive({
if (input$plot_by_departamento_item == "Item") {input$select_item} else {input$select_bydepartamento_departamento}
})
plot_municipio_select <- reactive({
if (input$plot_by_municipio_item == "Item") {input$select_item} else {input$select_bymunicipio_municipio}
})
plot_item_select <- reactive({
if ((input$plot_aggregation == 'Municipio' & input$plot_by_municipio_item == 'Item') | (input$plot_aggregation == 'Departamento' & input$plot_by_departamento_item == 'Item')) {input$select_byitem_item} else if (input$plot_aggregation == 'Departamento' & input$plot_by_departamento_item == 'Departamento') {input$select_bydepartamento_item} else {input$select_bymunicipio_item}
})
plot_datasetInput <- reactive({prices_long %>%
filter(
is.null(plot_item_select()) | Item %in% plot_item_select()
) %>%
execute_if(input$plot_aggregation == 'Departamento',    filter(is.null(plot_departamento_select()) | Departamento %in% plot_departamento_select())) %>%
execute_if(input$plot_aggregation == 'Municipio', select(-Departamento)) %>%
execute_if(input$plot_aggregation == 'Municipio', group_by(Fecha, Municipio, Item)) %>%
execute_if(input$plot_aggregation == 'Municipio', summarise_all(median, na.rm = TRUE)) %>%
execute_if(input$plot_aggregation == 'Municipio', filter(is.null(plot_municipio_select()) | Municipio %in% plot_municipio_select())) %>%
execute_if(input$plot_aggregation == 'Departamento' & input$select_index == 'TRUE', group_by(Municipio, Departamento, Item)) %>%
execute_if(input$plot_aggregation == 'Municipio'  & input$select_index == 'TRUE', group_by(Municipio, Item)) %>%
filter(!is.na(Price))
})
runApp()
runApp()
runApp()
plot_datasetInput <- reactive({prices_long %>%
filter(
is.null(plot_item_select()) | Item %in% plot_item_select()
) %>%
execute_if(input$plot_aggregation == 'Departamento',    filter(is.null(plot_departamento_select()) | Departamento %in% plot_departamento_select())) %>%
execute_if(input$plot_aggregation == 'Municipio', select(-Departamento)) %>%
execute_if(input$plot_aggregation == 'Municipio', group_by(lubridate::dmy(Fecha) , Municipio, Item)) %>%
execute_if(input$plot_aggregation == 'Municipio', summarise_all(median, na.rm = TRUE)) %>%
execute_if(input$plot_aggregation == 'Municipio', filter(is.null(plot_municipio_select()) | Municipio %in% plot_municipio_select())) %>%
execute_if(input$plot_aggregation == 'Departamento' & input$select_index == 'TRUE', group_by(Municipio, Departamento, Item)) %>%
execute_if(input$plot_aggregation == 'Municipio'  & input$select_index == 'TRUE', group_by(Municipio, Item)) %>%
filter(!is.na(Price))
})
plot_datasetInput <- prices_long %>% group_by(lubridate::dmy(Fecha) , Municipio, Item))
plot_datasetInput <- prices_long %>% group_by(lubridate::dmy(Fecha) , Municipio, Item)
View(plot_datasetInput)
plot_datasetInput <- prices_long %>% group_by(Fecha, Municipio, Item)
View(plot_datasetInput)
plot_datasetInput <- prices_long %>% group_by(Fecha, Municipio, Item) %>% summarise_all(median, na.rm = TRUE))
plot_datasetInput <- prices_long %>% group_by(Fecha, Municipio, Item) %>% summarise_all(median, na.rm = TRUE)
View(plot_datasetInput)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
