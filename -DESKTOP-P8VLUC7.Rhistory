full <- left_join(prices, indicators2, by = c("Fecha", "Departamento", "Municipio"))
#### * 3.3 Stock ###############################################################
stock <- data %>%
select(mes, departamento, municipio, starts_with("dias_exisnc"))
stock <- stock %>%
group_by(mes, departamento, municipio) %>%
summarise_all(median, na.rm = TRUE) %>%
select(mes, departamento, municipio, starts_with("dias_exisnc")) %>%          # calculate departamento medians
group_by(mes, departamento, municipio) %>%
summarise_all(median, na.rm = TRUE) %>%
setNames(gsub("dias_exisnc_","",names(.))) %>%                                 # rename columns names
ungroup() %>%
group_by(mes) %>%
rename(Fecha = mes, Departamento = departamento, Municipio = municipio,       # rename column names
"Días de existencia: Arroz"      = arroz,
"Días de existencia: Lentejas"   = lentejas,
"Días de existencia: Huevos rojos tipo AA"         = huevos,
"Días de existencia: Pechuga de pollo"             = pollo,
"Días de existencia: Fríjoles bola roja"           = frijoles,
"Días de existencia: Pastas tipo espagueti"        = pasta,
"Días de existencia: Harina de maíz"               = harina,
"Días de existencia: Plátano"       = platano,
"Días de existencia: Papa pastusa"  = papa,
"Días de existencia: Yuca"          = yuca,
"Días de existencia: Aceite"        = aceite,
"Días de existencia: Tomate chonto"     = tomate,
"Días de existencia: Leche"             = leche,
"Días de existencia: Lomitos de atún en lata en aceite"   = atun)
max(unique(lubridate::dmy(prices_long$Fecha)))
dates <- sort(unique(lubridate::dmy(prices_long$Fecha)))                                          # define list with date range in data
dates_min  <- min(lubridate::dmy(prices_long$Fecha))                              # set minimum date to be displayed
dates_max  <- max(lubridate::dmy(prices_long$Fecha))                              # maximum date in data
dates_max2 <- sort(unique(lubridate::dmy(prices_long$Fecha)), decreasing=T)[2]    # second-latest date
dates_max_1y <- as.POSIXlt(dates_max)                                             # most recent month minus 1 year
dates_max_1y$year <- dates_max_1y$year-1
dates_max_1y <- as.Date(format(dates_max_1y, "%Y-%m-01"), format = "%Y-%m-%d")
plot_location_list <- prices_long %>%                                           # define location list (which is later used as choice filter options)
ungroup() %>%
select(Departamento, Municipio) %>%                                             # extract governorate and district columns
arrange(Departamento, Municipio) %>%                                            # list alphabetically
filter(!duplicated(Departamento))                                               # remove duplicates
indicator_list <- names(indicators) %>%
str_subset(c("Fecha", "Departamento", "Municipio"), negate = TRUE)              # extract additional indicator list
cols      <- c("rgb(238,88,89)",   "rgb(88,88,90)",    "rgb(165,201,161)",        # define color palette for plot lines
"rgb(86,179,205)",  "rgb(246,158,97)",  "rgb(255,246,122)",        # están los colores reach + una paleta de amarillos y naranjas
"rgb(210,203,184)", "rgb(247,172,172)", "rgb(172,172,173)",        # azul claro y distintos tonos de beige
"rgb(210,228,208)", "rgb(171,217,230)", "rgb(251,207,176)",
"rgb(255,251,189)", "rgb(233,229,220)")
full_list <- data.frame(Item = indicator_list,                                    # create full indicator list
Group = "Indicadores") %>% arrange(Item)
full_list <- rbind(item_list, full_list)     # combine prices and additional indicators
prices_country <- prices %>%                                                      # aggregate price data at country level
select(-Departamento, -Municipio) %>%
group_by(Fecha) %>%
summarise_all(median, na.rm = TRUE)
prices_country_long <- gather(prices_country, Item, Price, 2:ncol(prices_country))# transform country-level price data to long format
prices_country_home <- prices_country %>%                                         # filter out SMEB data from country level price data
filter(lubridate::dmy(Fecha) >= dates_min) %>%
select(Fecha, `Lista de productos alimentarios`, `Lista de productos no alimentarios`,
`Lista de productos compilados`) %>%
gather(Item, Price, 'Lista de productos alimentarios':'Lista de productos compilados')                                    # transform SMEB data to long format so highcharter can read dataframe
one_year_from_current_date <- lubridate::dmy(prices_country_home$Fecha) %>% max() - 366
prices_country_home <- prices_country_home %>% filter(Fecha > one_year_from_current_date)
# Run the application
shinyApp(ui = ui, server = server)
#### 6 UI ######################################################################
ui <- bootstrapPage(
navbarPage("JMMI COLOMBIA",                                                                                     # Nombre del DASHBOARD o del panel navegador
theme = shinytheme("simplex"),                                                                       # Tema del navbarpage
#### * 2da ventana ################################################
tabPanel("Grafica de Precios",
icon = icon("chart-line"),                                                                  # Nombre del primer panel
chooseSliderSkin(skin = "Flat", color = NULL),
sidebarLayout(
sidebarPanel(
tags$i(h6("Nota: Los precios reportados solamente son indicativos.", style="color:#045a8d")),        # Texto y color del texto
pickerInput("plot_aggregation",                                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
multiple = FALSE
),
hr(),                                                                                                # Linea separadora
# Cuando se selecciona Departamento
conditionalPanel(condition = "input.plot_aggregation == 'Departamento'",
radioGroupButtons("plot_by_departamento_item",
label = "Agrupar por:",
choices = c("Item", "Departamento"),
selected = "Item",
justified = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' & input.plot_by_departamento_item == 'Departamento'",
pickerInput("select_bydepartamento_departamento",
label = "Departamento(s):",
choices = unique(plot_location_list$Departamento),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = c("Bogota, D.C."),
multiple = TRUE
)
),
# Cuando se selecciona Municipio
conditionalPanel(condition = "input.plot_aggregation == 'Municipio'",
radioGroupButtons("plot_by_municipio_item",
label = "Agrupar por:",
choices = c("Item", "Municipio"),
selected = "Item",
justified = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Municipio' & input.plot_by_municipio_item == 'Municipio'",
pickerInput("select_bymunicipio_municipio",
label = "Municipio(s):",
choices = lapply(split(plot_location_list$Municipio, plot_location_list$Departamento), as.list),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = c("Bogota, D.C."),
multiple = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' | input.plot_aggregation == 'Municipio'",
pickerInput("select_item",                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Grupo de productos: ",
choices = lapply(split(full_list$Item, full_list$Group), as.list),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = full_list$Item[1],
multiple = TRUE
)
),
hr(),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' | input.plot_aggregation == 'Municipio'",
sliderTextInput("select_date",                                                # set date slider
"Meses:",
force_edges = TRUE,
choices = dates,
selected = c(dates_min, dates_max)
)
),
hr(),
h6("Algo de carreta si se quiere o se puede eliminar esto"),
absolutePanel(id = "dropdown", bottom = 20, left = 20, width = 200,                            # define blue info button
fixed=TRUE, draggable = FALSE, height = "auto",
dropdown(
h4("Se requiere boton informativo"),
column(
HTML("Una tabla puede ir aqui???"),
width = 6),
column(p(h6("textooooooo")),
p(h6("más texto")),
p(h6("super textoooooo")),
p(h6("More details on the SMEB can be found here:",
tags$a(href="https://www.impact-repository.org/toolkit/file-storage-and-management/",
"Prueba de link"), ".")),
width = 5),
width = "650px",
tooltip = tooltipOptions(title = "Queremos utilizar un boton informativo?"),
size = "xs",
up = TRUE,
style = "jelly", icon = icon("info"),
animate = animateOptions(
enter = "fadeInLeftBig",
exit  = "fadeOutLeft",
duration = 0.5)
)
),
width = 3                                                                    # Cambiar el ancho del recuadro
),
mainPanel(                                                                      # Cuando va sidebarLayout debe ir mainPanel
br(),
tags$i(textOutput("plot_text"), style = "color: red"),                        # display error message displayed if there is no data available
highchartOutput("graph", width = "100%", height = "600px"),                   # display large chart
width = 8                                                                     # set width of main panel (out of 12, as per bootstrap logic)
)
)
),
# Nuevo tab Panel del Explorador de Datos##################################################################
tabPanel("Data Explorer",
icon = icon("table"),
sidebarLayout(
sidebarPanel(
radioGroupButtons("table_aggregation",                                                                   # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
justified = TRUE
),
hr(),                                                                                                # Linea separadora
# Cuando se selecciona Departamento
conditionalPanel(condition = "input.table_aggregation == 'Departamento'",
pickerInput("table_show_vars",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(split(full_list$Item, full_list$Group), as.list),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
),
# Cuando se selecciona municipio
conditionalPanel(condition = "input.table_aggregation == 'Municipio'",
pickerInput("table_show_vars_municipio",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(split(full_list$Item, full_list$Group), as.list),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
),
pickerInput("tabla_departamento",
label = "Departamento:",
choices = lapply(split(plot_location_list$Departamento, plot_location_list$Municipio),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = plot_location_list$Departamento,
multiple = TRUE
),
# Linea de tiempo/Rondas
sliderTextInput("table_date_select",
"Mes/Ronda:",
force_edges = TRUE,
choices = dates,
selected = c(dates_min, dates_max)
),
hr(),
# Botón de resetear y botón de descarga
actionButton("table_reset", "Reset filters"),
downloadButton("downloadData", "Download as CSV"),
width = 3
),
mainPanel(
DT::dataTableOutput("table", width = "100%", height = "100%"),
width = 9
)
)
)
)
)
)
#### 6 UI ######################################################################
ui <- bootstrapPage(
navbarPage("JMMI COLOMBIA",                                                                                     # Nombre del DASHBOARD o del panel navegador
theme = shinytheme("simplex"),                                                                       # Tema del navbarpage
#### * 2da ventana ################################################
tabPanel("Grafica de Precios",
icon = icon("chart-line"),                                                                  # Nombre del primer panel
chooseSliderSkin(skin = "Flat", color = NULL),
sidebarLayout(
sidebarPanel(
tags$i(h6("Nota: Los precios reportados solamente son indicativos.", style="color:#045a8d")),        # Texto y color del texto
pickerInput("plot_aggregation",                                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
multiple = FALSE
),
hr(),                                                                                                # Linea separadora
# Cuando se selecciona Departamento
conditionalPanel(condition = "input.plot_aggregation == 'Departamento'",
radioGroupButtons("plot_by_departamento_item",
label = "Agrupar por:",
choices = c("Item", "Departamento"),
selected = "Item",
justified = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' & input.plot_by_departamento_item == 'Departamento'",
pickerInput("select_bydepartamento_departamento",
label = "Departamento(s):",
choices = unique(plot_location_list$Departamento),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = c("Bogota, D.C."),
multiple = TRUE
)
),
# Cuando se selecciona Municipio
conditionalPanel(condition = "input.plot_aggregation == 'Municipio'",
radioGroupButtons("plot_by_municipio_item",
label = "Agrupar por:",
choices = c("Item", "Municipio"),
selected = "Item",
justified = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Municipio' & input.plot_by_municipio_item == 'Municipio'",
pickerInput("select_bymunicipio_municipio",
label = "Municipio(s):",
choices = lapply(split(plot_location_list$Municipio, plot_location_list$Departamento), as.list),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = c("Bogota, D.C."),
multiple = TRUE
)
),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' | input.plot_aggregation == 'Municipio'",
pickerInput("select_item",                                                         # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Grupo de productos: ",
choices = lapply(split(full_list$Item, full_list$Group), as.list),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = full_list$Item[1],
multiple = TRUE
)
),
hr(),
conditionalPanel(condition = "input.plot_aggregation == 'Departamento' | input.plot_aggregation == 'Municipio'",
sliderTextInput("select_date",                                                # set date slider
"Meses:",
force_edges = TRUE,
choices = dates,
selected = c(dates_min, dates_max)
)
),
hr(),
h6("Algo de carreta si se quiere o se puede eliminar esto"),
absolutePanel(id = "dropdown", bottom = 20, left = 20, width = 200,                            # define blue info button
fixed=TRUE, draggable = FALSE, height = "auto",
dropdown(
h4("Se requiere boton informativo"),
column(
HTML("Una tabla puede ir aqui???"),
width = 6),
column(p(h6("textooooooo")),
p(h6("más texto")),
p(h6("super textoooooo")),
p(h6("More details on the SMEB can be found here:",
tags$a(href="https://www.impact-repository.org/toolkit/file-storage-and-management/",
"Prueba de link"), ".")),
width = 5),
width = "650px",
tooltip = tooltipOptions(title = "Queremos utilizar un boton informativo?"),
size = "xs",
up = TRUE,
style = "jelly", icon = icon("info"),
animate = animateOptions(
enter = "fadeInLeftBig",
exit  = "fadeOutLeft",
duration = 0.5)
)
),
width = 3                                                                    # Cambiar el ancho del recuadro
),
mainPanel(                                                                      # Cuando va sidebarLayout debe ir mainPanel
br(),
tags$i(textOutput("plot_text"), style = "color: red"),                        # display error message displayed if there is no data available
highchartOutput("graph", width = "100%", height = "600px"),                   # display large chart
width = 8                                                                     # set width of main panel (out of 12, as per bootstrap logic)
)
)
),
# Nuevo tab Panel del Explorador de Datos##################################################################
tabPanel("Data Explorer",
icon = icon("table"),
sidebarLayout(
sidebarPanel(
radioGroupButtons("table_aggregation",                                                                   # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
justified = TRUE
),
hr(),                                                                                                # Linea separadora
# Cuando se selecciona Departamento
conditionalPanel(condition = "input.table_aggregation == 'Departamento'",
pickerInput("table_show_vars",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(split(full_list$Item, full_list$Group)),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
),
# Cuando se selecciona municipio
conditionalPanel(condition = "input.table_aggregation == 'Municipio'",
pickerInput("table_show_vars_municipio",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(split(full_list$Item, full_list$Group)),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
),
pickerInput("tabla_departamento",
label = "Departamento:",
choices = lapply(split(plot_location_list$Departamento, plot_location_list$Municipio),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = plot_location_list$Departamento,
multiple = TRUE
),
# Linea de tiempo/Rondas
sliderTextInput("table_date_select",
"Mes/Ronda:",
force_edges = TRUE,
choices = dates,
selected = c(dates_min, dates_max)
),
hr(),
# Botón de resetear y botón de descarga
actionButton("table_reset", "Reset filters"),
downloadButton("downloadData", "Download as CSV"),
width = 3
),
mainPanel(
DT::dataTableOutput("table", width = "100%", height = "100%"),
width = 9
)
)
)
)
)
)
server <- function(input, output, session) {
#########   2da ventana ######################################################
# Funciones para imprimir la informacion
# imprimir departamento si se tiene solo Item
plot_departamento_select <- reactive({
if (input$plot_by_departamento_item == "Item") {input$select_byitem_departamento} else {input$select_bydepartamento_departamento}
})
# imprimir municipio si se tiene solo Item
plot_municipio_select <- reactive({
if (input$plot_by_municipio_item == "Item") {input$select_byitem_municipio} else {input$select_bymunicipio_municipio}
})
# imprimir municipio o departamento cuando se escogio algun Item
plot_item_select <- reactive({
if ((input$plot_aggregation == 'Municipio' & input$plot_by_municipio_item == 'Item') | (input$plot_aggregation == 'Departamento' & input$plot_by_departamento_item == 'Item')) {input$select_item}
})
# La informacion que se va a mostrar
plot_datasetInput <- reactive({prices_long %>%
filter(
is.null(plot_item_select()) | Item %in% plot_item_select()
) %>%
execute_if(input$plot_by_municipio_item == 'Item' | input$plot_by_departamento_item == 'Item',
filter(
lubridate::dmy(Fecha) >= input$select_date[1] & lubridate::dmy(Fecha) <= input$select_date[2]
)) %>%
execute_if(input$plot_aggregation == 'Departamento',    filter(is.null(plot_departamento_select()) | Departamento %in% plot_departamento_select())) %>%
execute_if(input$plot_aggregation == 'Municipio', select(-Departamento)) %>%
execute_if(input$plot_aggregation == 'Municipio', group_by(lubridate::dmy(Fecha),Municipio)) %>%
execute_if(input$plot_aggregation == 'Municipio', summarise_all(median, na.rm = TRUE)) %>%
execute_if(input$plot_aggregation == 'Municipio', filter(is.null(plot_municipio_select()) | Municipio %in% plot_municipio_select())) %>%
filter(!is.na(Price))
})
output$plot_text <- renderText({
if (nrow(plot_datasetInput()) == 0) {
"There is no data for this selection. Change the time frame or select another indicator/location."} else {"vamos bien perrito"}
})
output$graph <- renderHighchart({
if ((input$plot_aggregation == "Departamento" & input$plot_by_departamento_item == "Item") | (input$plot_aggregation == "Municipio" & input$plot_by_municipio_item == "Item")) {
graph <- hchart(plot_datasetInput(), "point", hcaes(x = as.character(sort(lubridate::dmy(Fecha))), y = Price, group = Item))
} else if (input$plot_aggregation == "Departamento"){
graph <- hchart(plot_datasetInput(), "line", hcaes(x = as.character(sort(lubridate::dmy(Fecha))), y = Price, group = Departamento))
} else {
graph <- hchart(plot_datasetInput(), "line", hcaes(x = as.character(sort(lubridate::dmy(Fecha))), y = Price, group = Municipio))
}
graph <- graph %>%
hc_xAxis(title = "") %>%
hc_colors(cols) %>%
hc_exporting(
enabled = TRUE,
filename = paste0("IRQ-JPMI-linegraph_export-", Sys.Date()),
buttons = list(contextButton = list(menuItems = list("downloadPNG", "downloadPDF", "downloadCSV"))),
sourceWidth = 1000,
sourceHeight = 600
)
})
}
tabPanel("Data Explorer",
icon = icon("table"),
sidebarLayout(
sidebarPanel(
radioGroupButtons("table_aggregation",                                                                   # pickerInput lista y radioGroupButtons opciones a lo largo
label = "Nivel de agregación: ",
choices = c("Departamento", "Municipio"),
selected = "Departamento",
justified = TRUE
),
# Cuando se selecciona Departamento
conditionalPanel(condition = "input.table_aggregation == 'Departamento'",
pickerInput("table_show_vars",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(as.list) %>% split(full_list$Item,full_list$Group),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
conditionalPanel(condition = "input.table_aggregation == 'Municipio'",
pickerInput("table_show_vars_municipio",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(as.list) %>% split(full_list$Item,full_list$Group),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
conditionalPanel(condition = "input.table_aggregation == 'Departamento'",
pickerInput("table_show_vars",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(as.list) %>% split(full_list$Item,full_list$Group),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
conditionalPanel(condition = "input.table_aggregation == 'Municipio'",
pickerInput("table_show_vars_municipio",
label = "Productos:",
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
choices = lapply(as.list) %>% split(full_list$Item,full_list$Group),
selected = c ("Alimentos", "No alimentos"),
multiple = TRUE
)
)
runApp()
pickerInput("tabla_departamento",
label = "Departamento:",
choices = lapply(split(plot_location_list$Departamento, plot_location_list$Municipio),
options = list(title = "Select", `actions-box` = TRUE, `live-search` = TRUE),
selected = plot_location_list$Departamento,
multiple = TRUE
)
